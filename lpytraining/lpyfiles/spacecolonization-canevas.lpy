from openalea.plantgl.all import *
from random import uniform
from math import pi,radians

def generate_points(nbpoints,size):
  pts = []
  for i in xrange(nbpoints):
    angle = uniform(0,2 * pi)
    ok = False
    while not ok:
      x,y,z =  uniform(-1,1),uniform(-1,1),uniform(0,1)
      if (x**2+y**2) <= profile(z)**2: ok = True
    pts.append(Vector3(x,y,z)*size)
  return pts

pts = generate_points(5000,20)

scale = 1
grow_dist = 1 * scale
killradius = grow_dist * 1
perceptionradius = grow_dist * 1.5 

min_nb_pt = 5


rootpos = Vector3(0,0,1)

# place the attractor points into a grid
attractor_grid = Point3Grid(pts, 10)

rootattr = attractor_grid.query_ball_point(rootpos, perceptionradius)
attractor_grid.disable_points(attractor_grid.query_ball_point(rootpos, killradius) )

backward()

initial_radius = 0.04
e = 2.5

def piperadius(ris):
   return pow(sum([pow(ri,e) for ri in ris]),1./e)

module Bud, I, Node, Attractors

Axiom: Attractors @Gc Bud(rootpos, rootattr)

derivation length: 100
production:


Bud(pt, atts) :  
       # compute mean direction    
       # compute new position
       # remove closest attractors
       # produce active nodes    
       pass

Node(pt):
  # find nearest attractor points in cone of perception of given radius and angle
  # if enough attractors are available, produce new bud

I(pt, r) >> x([I(lpt, lr)]) :
  if len(lr) >= 1:
    produce I(pt,piperadius(lr))

interpretation:

I(pos,radius) --> _(radius) LineTo(pos)
Bud(pt, atts) -->  [SetColor(5) Sphere(0.1*scale)]
Node(pt) -->  [SetColor(3) Sphere(0.1*scale)]

Attractors :
  pttodisplay = attractor_grid.get_enabled_points()
  if len(pttodisplay) > 0:
    produce [,(3) @g(PointSet(pttodisplay,width=2))]
endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	profile = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.0181818, 1),(0.219697, 0.0363636, 1),(0.297727, 0.313636, 1),(0.389394, 0.327273, 1),(0.593182, 0.290909, 1),(0.688636, 0.0590909, 1),(0.784091, 0.0954545, 1),(0.884091, 0.172727, 1),(1, 0, 1)]) , 
	    )
	profile.name = "profile"
	panel_0 = ({'active': True, 'visible': False, 'name': 'Panel 1'},[('Function',profile)])
	parameterset = [panel_0,]
	context["__functions__"] = [('profile',profile),]
	context["__curves__"] = []
	context["__parameterset__"] = parameterset
	context["profile"] = pgl.QuantisedFunction(profile)
